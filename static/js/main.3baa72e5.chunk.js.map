{"version":3,"sources":["Dustbin.tsx","Box.tsx","ItemTypes.ts","Vector-1.svg","Vector-2.svg","Vector-3.svg","NatGeo.jpg","Container.tsx","index.tsx"],"names":["style","height","width","marginRight","marginBottom","color","padding","textAlign","fontSize","lineHeight","float","Dustbin","memo","accept","lastDroppedItem","onDrop","useDrop","drop","collect","monitor","isOver","canDrop","isActive","backgroundColor","ref","role","join","JSON","stringify","border","cursor","Box","name","type","src","isDropped","useDrag","item","opacity","isDragging","drag","ItemTypes","Container","useState","accepts","dustbins","setDustbins","Vector1","Vector2","Vector3","boxes","droppedBoxNames","setDroppedBoxNames","handleDrop","useCallback","index","update","$push","$set","Basemap","className","overflow","clear","map","boxName","indexOf","App","icon","faMapMarkerAlt","DndProvider","backend","HTML5Backend","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.3baa72e5.chunk.js","sourcesContent":["import { CSSProperties, FC, memo } from 'react'\nimport { useDrop } from 'react-dnd'\n\nconst style: CSSProperties = {\n  height: '12rem',\n  width: '12rem',\n  marginRight: '1.5rem',\n  marginBottom: '1.5rem',\n  color: 'white',\n  padding: '1rem',\n  textAlign: 'center',\n  fontSize: '1rem',\n  lineHeight: 'normal',\n  float: 'left',\n}\n\nexport interface DustbinProps {\n  accept: string[]\n  lastDroppedItem?: any\n  onDrop: (item: any) => void\n}\n\nexport const Dustbin: FC<DustbinProps> = memo(function Dustbin({\n  accept,\n  lastDroppedItem,\n  onDrop,\n}) {\n  const [{ isOver, canDrop }, drop] = useDrop({\n    accept,\n    drop: onDrop,\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  })\n\n  const isActive = isOver && canDrop\n  let backgroundColor = '#222'\n  if (isActive) {\n    backgroundColor = 'darkgreen'\n  } else if (canDrop) {\n    backgroundColor = 'darkkhaki'\n  }\n\n  return (\n    <div ref={drop} role=\"Dustbin\" style={{ ...style, backgroundColor }}>\n      {isActive\n        ? 'Release to drop'\n        : `This container accepts: ${accept.join(', ')}`}\n\n      {lastDroppedItem && (\n        <p>Last dropped: {JSON.stringify(lastDroppedItem)}</p>\n      )}\n    </div>\n  )\n})\n","import { CSSProperties, FC, memo } from 'react'\nimport { useDrag } from 'react-dnd'\n\nconst style: CSSProperties = {\n  border: '1px dashed gray',\n  backgroundColor: 'white',\n  padding: '0.5rem 1rem',\n  marginRight: '1.5rem',\n  marginBottom: '1.5rem',\n  cursor: 'move',\n  float: 'left',\n}\n\nexport interface BoxProps {\n  name: string\n  type: string\n  src: string\n  isDropped: boolean\n}\n\nexport const Box: FC<BoxProps> = memo(function Box({ name, type, src, isDropped }) {\n  const [{ opacity }, drag] = useDrag(\n    () => ({\n      type,\n      item: { name },\n      collect: (monitor) => ({\n        opacity: monitor.isDragging() ? 0.4 : 1,\n      }),\n    }),\n    [name, type],\n  )\n\n  return (\n    <div ref={drag} role=\"Box\" style={{ ...style, opacity }}>\n      {isDropped ? <s>{name}</s> : name}\n      <img src={src} />\n    </div>\n  )\n})\n","export const ItemTypes = {\n  Vector1: 'Vector1',\n  Vector2: 'Vector2',\n  Vector3: 'Vector3',\n}\n","export default __webpack_public_path__ + \"static/media/Vector-1.6bcf3866.svg\";","export default __webpack_public_path__ + \"static/media/Vector-2.8958142c.svg\";","export default __webpack_public_path__ + \"static/media/Vector-3.103edc63.svg\";","export default __webpack_public_path__ + \"static/media/NatGeo.a7fa550e.jpg\";","import { FC, useState, useCallback, memo } from 'react'\nimport { NativeTypes } from 'react-dnd-html5-backend'\nimport { Dustbin } from './Dustbin'\nimport { Box } from './Box'\nimport { ItemTypes } from './ItemTypes'\nimport Vector1 from './Vector-1.svg'\nimport Vector2 from './Vector-2.svg'\nimport Vector3 from './Vector-3.svg'\nimport Basemap from './NatGeo.jpg'\nimport update from 'immutability-helper'\n\ninterface DustbinState {\n  accepts: string[]\n  lastDroppedItem: any\n}\n\ninterface BoxState {\n  name: string\n  type: string\n  src: string\n}\n\nexport interface DustbinSpec {\n  accepts: string[]\n  lastDroppedItem: any\n}\nexport interface BoxSpec {\n  name: string\n  type: string\n  src: string\n}\nexport interface ContainerState {\n  droppedBoxNames: string[]\n  dustbins: DustbinSpec[]\n  boxes: BoxSpec[]\n}\n\nexport const Container: FC = memo(function Container() {\n  const [dustbins, setDustbins] = useState<DustbinState[]>([\n    { accepts: [ItemTypes.Vector1], lastDroppedItem: null },\n    { accepts: [ItemTypes.Vector2], lastDroppedItem: null },\n    {\n      accepts: [ItemTypes.Vector3],\n      lastDroppedItem: null,\n    },\n    { accepts: [ItemTypes.Vector1], lastDroppedItem: null },\n  ])\n\n  const [boxes] = useState<BoxState[]>([\n    { name: 'Vector 1', src: Vector1, type: ItemTypes.Vector1 },\n    { name: 'Vector-2', src: Vector2, type: ItemTypes.Vector2 },\n    { name: 'Vector-3', src: Vector3, type: ItemTypes.Vector3 },\n  ])\n\n  const [droppedBoxNames, setDroppedBoxNames] = useState<string[]>([])\n\n  function isDropped(boxName: string) {\n    return droppedBoxNames.indexOf(boxName) > -1\n  }\n\n  const handleDrop = useCallback(\n    (index: number, item: { name: string }) => {\n      const { name } = item\n      setDroppedBoxNames(\n        update(droppedBoxNames, name ? { $push: [name] } : { $push: [] }),\n      )\n      setDustbins(\n        update(dustbins, {\n          [index]: {\n            lastDroppedItem: {\n              $set: item,\n            },\n          },\n        }),\n      )\n    },\n    [droppedBoxNames, dustbins],\n  )\n\n  return (\n    <div>\n      <div>\n        <img src={Basemap} className=\"photo\"/>\n      </div>\n      <div style={{ overflow: 'hidden', clear: 'both' }}>\n        {dustbins.map(({ accepts, lastDroppedItem }, index) => (\n          <Dustbin\n            accept={accepts}\n            lastDroppedItem={lastDroppedItem}\n            onDrop={(item) => handleDrop(index, item)}\n            key={index}\n          />\n        ))}\n      </div>\n\n      <div style={{ overflow: 'hidden', clear: 'both' }}>\n        {boxes.map(({ name, type, src }, index) => (\n          <Box\n            name={name}\n            type={type}\n            src={src}\n            isDropped={isDropped(name)}\n            key={index}\n          />\n        ))}\n      </div>\n    </div>\n  )\n})\n","\n\timport { render } from 'react-dom'\n\timport Example from './example'\n\timport { DndProvider } from 'react-dnd'\n\timport { HTML5Backend } from 'react-dnd-html5-backend'\n  import { faMapMarkerAlt } from \"@fortawesome/free-solid-svg-icons\";\n  import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n  \n\tfunction App() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n        <h1>\n          Like a L<FontAwesomeIcon icon={faMapMarkerAlt} />cal\n        </h1>\n\t\t\t\t<DndProvider backend={HTML5Backend}>\n\t\t\t\t\t<Example />\n\t\t\t\t</DndProvider>\n\t\t\t</div>\n\t\t)\n\t}\n\n\tconst rootElement = document.getElementById('root')\n\trender(<App />, rootElement)\n"],"sourceRoot":""}